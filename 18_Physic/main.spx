import (
	"sort"
	"fmt"
	"math"
)
var (
	Score        int
	cooldownTime int
	gameStatus   EGameStatus
)
const DEADLINE = -180
type EGameStatus= int64
const (
	PLAYING EPlayerMode = iota
	WIN
	FAILED
)
type Transform struct {
	X float64
	Y float64
	Dir int64
}

func (p* Transform) ToString() string{
	return fmt.Sprintf("TransformData %.1f %.1f %d", p.X, p.Y, p.Dir)
}

func IsPlaying() bool {
	return gameStatus == PLAYING
}
func loadTilemaps(datas *tscnMapData) {
	paths := make(map[int]string)
	for _, item := range datas.TileMap.TileSet.Sources {
		paths[item.ID] = item.TexturePath
	}
	for idx, layer := range datas.TileMap.Layers {
		layerId := int64(idx+1)
		SetTileMapLayerIndex(layerId)
		tiles := layer.Tiles
		sort.Slice (tiles, func(i, j int) bool {
			return tiles[i].SourceID < tiles[j].SourceID
		})
		lastId := -1
		path := ""
		for _, tile := range tiles {
			if(lastId != tile.SourceID){
				lastId = tile.SourceID
				path = paths[tile.SourceID]
			}
			y,x := tile.WorldCoords.X,tile.WorldCoords.Y
			PlaceTile(x,-y,path)
		}
	}
}
func loadSprite2ds(datas *tscnMapData) {
	for _, item := range datas.Sprite2Ds {
		CreatePureSprite(item.TexturePath, item.Position.X, -item.Position.Y, int64(item.ZIndex))
	}
}

func loadGameObjs(datas *tscnMapData) {
	for _, item := range datas.Prefabs {
		name := item.PrefabPath
		x,y := item.Position.X,  -item.Position.Y
		trans := Transform{X:x, Y: y}
		switch name {
			case "brick":
				Brick.clone trans
			case "coin":
				Coin.clone trans
			case "goomba":
				Goomba.clone trans
			case "mystery_box":
				MysteryBox.clone trans
				
		}
	}
}
func loadPlatforms(datas *tscnMapData) {
	Platform.clone Transform{X:-100, Y: -80}
	Platform.clone Transform{X:880, Y: -100}
}

const Math_PI = float64(3.1415926535897932384626433833)


func DegToRad(p_y float64) float64 {
	return p_y * (Math_PI / 180.0)
}

func RadToDeg(p_y float64) float64 {
	return p_y * (180.0 / Math_PI)
}
func AngleToPoint(x1, y1 float64, x2,y2 float64) float64 {
	return Angle(y2 -y1, x2 -x1)
}

func Angle(y,x float64) float64 {
	return float64(math.Atan2(float64(y), float64(x)))
}

func Abs(x float64) float64 {
	return float64(math.Abs(float64(x)))
}

func MoveToward(from, to, delta float64) float64 { //move_toward
	if Abs(to-from) <= delta {
		return to
	}
	return from + float64(Sign(to-from))*delta
}
func Signf(x float64) float64 {
	return float64(Sign(x))
}

func Sign(x float64) int64 {
	if x < 0 {
		return -1
	} else if x > 0 {
		return 1
	}
	return 0
}

onStart => {
	gameStatus = PLAYING
	datas := Scene1.Load()
	loadTilemaps(datas)
	loadSprite2ds(datas)
	loadGameObjs(datas)
	loadPlatforms(datas)
}


onStart =>{
	cooldownTime = 60
	for{
		wait 1
		cooldownTime--
	}
}

