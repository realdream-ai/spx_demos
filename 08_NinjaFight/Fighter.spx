var (
	attacking bool
	shielding bool
	walking   bool
)

func saySomething() {
	think "OMG！这么多敌人", 2
	think "气势上可不能输", 2
	say "乌拉！！！ypa！！！", 3
}

// @dev: 普通拳攻击
func attack() {
	if attacking || shielding {
		return
	}

	play "拳攻击", false

	attacking = true
	if checkAttack(heading(), xpos(), ypos(), Samurai.xpos(), Samurai.ypos(), false) {
		broadcast "attack Samurai"
		println "杀掉敌人！"
	}
	for _, shinobi := range shinobis {
		if checkAttack(heading(), xpos(), ypos(), shinobi.xpos(), shinobi.ypos(), false) {
			broadcast "attack", shinobi
			println "杀掉敌人！"
		}
	}
	// r := rand(0, 3)
	// if r < 1 {
	// 	animate "attack"
	// } else if r < 2 {
	// 	animate "attack2"
	// } else {
	// 	animate "attack3"
	// }
	animate "attack"
	attacking = false
}

// @dev: 腿攻击
func attack3() {
	if attacking || shielding {
		return
	}

	play "attack3", false

	attacking = true
	if checkAttack(heading(), xpos(), ypos(), Samurai.xpos(), Samurai.ypos(), false) {
		broadcast "attack Samurai"
		println "杀掉敌人！"
	}
	for _, shinobi := range shinobis {
		if checkAttack(heading(), xpos(), ypos(), shinobi.xpos(), shinobi.ypos(), false) {
			broadcast "attack", shinobi
			println "杀掉敌人！"
		}
	}

	animate "attack3"
	attacking = false
}

// @dev: 必杀技！乌拉攻击！消灭当前朝向所有敌人！
func attackYpa() {
	if attacking || shielding {
		return
	}

	attacking = true
	animate "乌拉"
	if checkAttack(heading(), xpos(), ypos(), Samurai.xpos(), Samurai.ypos(), true) {
		broadcast "attack Samurai ypa", Samurai
		println "必杀技杀掉敌人！"
	}
	for _, shinobi := range shinobis {
		if checkAttack(heading(), xpos(), ypos(), shinobi.xpos(), shinobi.ypos(), true) {
			broadcast "attack ypa", shinobi
			println "必杀技杀掉敌人！"
		}
	}

	attacking = false
}

func shield() {
	if attacking || shielding {
		return
	}
	shielding = true
	animate "shield"
	shielding = false
}

// 乌拉必杀技技能冷却
func cooldown() {
	cooldownTime = 10
	for cooldownTime != 0 {
		wait 1
		cooldownTime--
	}
}

onKey KeyD, => {
	walking = true
	setHeading float64(Right)
	step 30
	walking = false
}

onKey KeyA, => {
	walking = true
	setHeading float64(Left)
	step 30
	walking = false
}

onKey KeyW, => {
	walking = true
	setHeading float64(Up)
	step 30
	walking = false
}

onKey KeyS, => {
	walking = true
	setHeading float64(Down)
	step 30
	walking = false
}

onKey KeyJ, => {
	attack
}

onKey KeyK, => {
	attack3
}

onKey KeyL, => {
	shield
}

/// @dev: 瞬移
onKey KeyU, => {
	if walking {
		return
	}
	play "瞬间移动", false
	move 50
}

/// @dev: 乌拉攻击
onKey KeyO, => {
	if cooldownTime != 0 {
		return
	}
	attackYpa
	cooldown
}

onMsg (msg, data) => {
	println "收到广播", msg
	if msg != "attack Fighter" {
		return
	}
	attackHeading := data.(float64)
	if attackHeading != heading() && shielding {
		println "我格挡住啦！"
		return
	}
	println "接受死亡吧"
	println "游戏结束"
	broadcast "end"
	play "死亡", false
	die
}
onStart => {
	saySomething
}
