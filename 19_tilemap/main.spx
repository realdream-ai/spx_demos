import (
	"fmt"
	"math"
	"sort"
)

var (
	// 游戏时间系统
	gameHour   int
	gameMinute int
	timeSpeed  float64

	// 地图位置定义
	locations        map[string][]float64
	outdoorLocations []string

	// 活动定义
	activitys map[string]Activity

	// 全局状态
	farmWorkNeeded int
	clinicBusy     bool

	// AI 居民列表
	residents []Sprite

	// 视口精灵
	followSprite string

	// 创建监视器显示人物状态
	statusMonitor string
)

type Transform struct {
	X   float64
	Y   float64
	Dir int64
}

func (p *Transform) ToString() string {
	return fmt.Sprintf("TransformData %.1f %.1f %d", p.X, p.Y, p.Dir)
}

func OnCloneSprite(sp Sprite, data any) {
	if data == nil {
		return
	}
	trans := data.(Transform)
	sp.setXYpos trans.X, trans.Y
	sp.show

}

func cloneSprites() {
	书凳.clone Transform{X:823.0,Y:-288.0}
	书凳.clone Transform{X:71.0,Y:306.0}
	书凳.clone Transform{X:826.0,Y:-337.0}
	书架.clone Transform{X:675.0,Y:-146.0}
	书架.clone Transform{X:675.0,Y:-215.0}
	书架.clone Transform{X:825.0,Y:-145.0}
	书桌.clone Transform{X:89.0,Y:303.0}
	书桌.clone Transform{X:846.0,Y:-290.0}
	书桌.clone Transform{X:849.0,Y:-339.0}
	地毯.clone Transform{X:306.0,Y:197.0}
	地毯.clone Transform{X:-278.0,Y:197.0}
	床.clone Transform{X:75.0,Y:350.0}
	床.clone Transform{X:-328.0,Y:346.0}
	床.clone Transform{X:348.0,Y:349.0}
	床.clone Transform{X:278.0,Y:349.0}
	床.clone Transform{X:-26.0,Y:348.0}
	床头.clone Transform{X:324.0,Y:363.0}
	床头.clone Transform{X:-300.0,Y:361.0}
	床头.clone Transform{X:50.0,Y:363.0}
	收银台.clone Transform{X:-326.0,Y:-278.0}
	收银台.clone Transform{X:40.0,Y:-191.0}
	板凳.clone Transform{X:448.0,Y:198.0}
	板凳.clone Transform{X:-281.0,Y:306.0}
	板凳.clone Transform{X:394.0,Y:198.0}
	板凳.clone Transform{X:-83.0,Y:203.0}
	桌.clone Transform{X:-253.0,Y:301.0}
	桌.clone Transform{X:-56.0,Y:197.0}
	桌.clone Transform{X:422.0,Y:192.0}
	水桶.clone Transform{X:-632.0,Y:272.0}
	沙发.clone Transform{X:251.0,Y:197.0}
	沙发.clone Transform{X:-331.0,Y:200.0}
	洗手台.clone Transform{X:442.0,Y:353.0}
	洗衣机.clone Transform{X:395.0,Y:351.0}
	电脑.clone Transform{X:825.0,Y:-208.0}
	电视.clone Transform{X:72.0,Y:240.0}
	番茄.clone Transform{X:-829.0,Y:272.0}
	番茄.clone Transform{X:-786.0,Y:273.0}
	盆栽.clone Transform{X:240.0,Y:296.0}
	盆栽.clone Transform{X:-24.0,Y:296.0}
	盆栽.clone Transform{X:-338.0,Y:293.0}
	盆栽.clone Transform{X:704.0,Y:193.0}
	秋千.clone Transform{X:-590.0,Y:-280.0}
	秋千.clone Transform{X:-630.0,Y:-280.0}
	稻草人.clone Transform{X:-570.0,Y:394.0}
	脏衣服.clone Transform{X:442.0,Y:301.0}
	药柜.clone Transform{X:778.0,Y:306.0}
	药柜.clone Transform{X:778.0,Y:258.0}
	药柜.clone Transform{X:848.0,Y:307.0}
	衣柜.clone Transform{X:-74.0,Y:351.0}
	衣柜.clone Transform{X:-248.0,Y:353.0}
	衣柜.clone Transform{X:241.0,Y:354.0}
	诊所导诊台.clone Transform{X:832.0,Y:182.0}
	超市冰冻柜.clone Transform{X:310.0,Y:-132.0}
	超市冰冻柜.clone Transform{X:349.0,Y:-132.0}
	超市冰激凌柜.clone Transform{X:62.0,Y:-234.0}
	超市水果柜.clone Transform{X:293.0,Y:-314.0}
	超市肉柜.clone Transform{X:106.0,Y:-346.0}
	超市货架.clone Transform{X:293.0,Y:-230.0}
	超市面包柜.clone Transform{X:62.0,Y:-284.0}
	超市鱼柜.clone Transform{X:63.0,Y:-347.0}
	超市鱼柜.clone Transform{X:28.0,Y:-347.0}
	长桌.clone Transform{X:674.0,Y:-290.0}
	餐厅厨房.clone Transform{X:-224.0,Y:-173.0}
	餐桌.clone Transform{X:-120.0,Y:-330.0}
	餐桌.clone Transform{X:-231.0,Y:-239.0}
	餐桌.clone Transform{X:-231.0,Y:-330.0}
	餐桌.clone Transform{X:-121.0,Y:-238.0}
	餐椅.clone Transform{X:-156.0,Y:-228.0}
	餐椅.clone Transform{X:-266.0,Y:-319.0}
	餐椅.clone Transform{X:-264.0,Y:-228.0}
	餐椅.clone Transform{X:-155.0,Y:-317.0}
	餐椅.clone Transform{X:-199.0,Y:-228.0}
}
// AI 命令定义

// 走路
// 目标地
type CmdGoTo struct {
	Location string `desc:"目标位置: farm, clinic, park, shop, restaurant, house1-house3"`
	Reason   string `desc:"前往的原因"`
}

// 到目的地后，干什么事
type CmdActivity struct {
	Activity string  `desc:"活动类型: sleep, eat, work, shop, socialize, exercise, rest"`
	Duration float64 `desc:"活动持续时间（游戏分钟）"`
}

// 和人交流
type CmdSpeakWith struct {
	TargetName string `desc:"要交谈/打招呼的人名，必须在附近或者在一间屋子里"`
	Message    string `desc:"要说的话或交谈内容"`
}

type Activity string

const (
	Idle      Activity = "空闲"
	Work      Activity = "工作"
	Sleep     Activity = "睡觉"
	Eat       Activity = "吃饭"
	Shop      Activity = "购物"
	Socialize Activity = "社交"
	Exercise  Activity = "锻炼"
	Rest      Activity = "休息"
)


func initActivitys() {
	// sleep, eat, work, shop, socialize, exercise, rest
	activitys = {
		"sleep":     Sleep,
		"eat":       Eat,
		"work":      Work,
		"shop":      Shop,
		"socialize": Socialize,
		"exercise":  Exercise,
		"rest":      Rest,
	}
}

func initLocations() {
	locations = {
		"farm":       [-666, 337],
		"clinic":     [824, 167],
		"park":       [-657, -202],
		"shop":       [64, 177],
		"restaurant": [-221, -197],
		"house1":     [-308, 254],
		"house2":     [51, 218],
		"house3":     [315, 222],
	}

	outdoorLocations = ["farm", "park"]
}

func setStatusText(text string) {
	statusMonitor = text
}

func toggleStatus() {
	status := getWidget(Monitor, "statusMonitor")
	if status.visible {
		status.hide
	} else {
		status.show
	}
}

func hideStatus() {
	status := getWidget(Monitor, "statusMonitor")
	status.hide
}

func showStatus() {
	status := getWidget(Monitor, "statusMonitor")
	status.show
}

func getLocation(name string) (float64, float64) {
	if loc, ok := locations[name]; ok {
		return loc[0], loc[1]
	}
	return 0, 0
}

func getActivity(activity string) Activity {
	if ac, ok := activitys[activity]; ok {
		return ac
	}
	return Idle
}

func currentTime() int {
	return gameHour*100 + gameMinute
}

func stringTime() string {
	return sprintf("%d:%d", gameHour, gameMinute)
}

func isOutdoorLocation(location string) bool {
	for _, outdoor := range outdoorLocations {
		if outdoor == location {
			return true
		}
	}
	return false
}

// [小孩B16, Diana, Farmer, Alice, Charile, 小孩A]
func getResidentsInLocation(location string) []string {
	var result []string

	return result
}

func getResidentsInRange(x, y float64, maxDistance float64) *List {
	var result = &List{}
	for _, resident := range residents {
		dx := resident.xpos - x
		dy := resident.ypos - y
		distance := sqrt(dx*dx + dy*dy)

		if distance <= maxDistance && distance > 0 {
			result.append(resident.name)
		}
	}
	return result
}

// 世界时间
func updateTime() {
	gameMinute += int(timeSpeed)
	if gameMinute >= 60 {
		gameMinute = 0
		gameHour++
		if gameHour >= 24 {
			gameHour = 0
		}
		broadcast "hour_changed", gameHour
	}
	broadcast "time_update", gameHour*100+gameMinute
}

// 休息时间
func isNightTime() bool {
	return gameHour >= 22 || gameHour <= 6
}

// 用餐时间
func isMealTime() bool {
	return gameHour == 8 || gameHour == 12 || gameHour == 18
}

// 工作时间
func isWorkTime() bool {
	return gameHour >= 9 && gameHour <= 17
}

// 视口跟随某个精灵
func follow(spr Sprite) {
	println "folow ...",spr.name
	hideStatus
	followSprite = spr.name
	Camera.follow spr
}

onStart => {
	initLocations()
	initActivitys()
	gameHour = 8
	gameMinute = 0
	timeSpeed = 2
	farmWorkNeeded = 5
	clinicBusy = false

	// setupPathFinder(50, 50, 70, 50, true, false)

	residents = [Smith]

	// 镜头设置
	Camera.setZoom 1
	follow Smith

	// 启动时间系统
	forever => {
		wait 1
		updateTime()
	}
}

onMsg (msg, data) => {
	if msg == "farm_work_done" {
		farmWorkNeeded--
		if farmWorkNeeded < 0 {
			farmWorkNeeded = 0
		}
	} else if msg == "clinic_visit" {
		clinicBusy = true
		wait 3 // 看病需要3秒
		clinicBusy = false
	} else if msg == "resident_status" {
		// meta := data.(map[string]string)
		// println meta["name"], ":", meta["action"], "at", meta["location"]
	}
}

onKey KeyLeft, => {
	timeSpeed = timeSpeed / 2
}

onKey KeyRight, => {
	timeSpeed = timeSpeed * 2
}

onKey Key1, => {
	follow Smith
}
onKey Key2, => {
	follow Player
}

onStart => {
	cloneSprites()
}
